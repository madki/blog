<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>madki.xyz</title>
   
   <link>http://madki.xyz</link>
   <description>Web log of various coding experiments and attempts</description>
   <language>en-uk</language>
   <managingEditor> Madhu kiran</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>AutoIntent</title>
	  <link>/blog//auto-intent</link>
	  <author>Madhu kiran</author>
	  <pubDate>2016-02-06T10:18:00+00:00</pubDate>
	  <guid>/blog//auto-intent</guid>
	  <description><![CDATA[
	     <h2>The problem</h2>

<p>Data transfer in android happens a lot via intents. Even in case of single activity pattern (to which square is a strong proponent of) there are still Android&#39;s system activities that are needed to be started or passing messages to services. So intents are probably going to stay for a while and if there&#39;s a way to make them better it&#39;s worth taking a look at.</p>

<ul>
<li><p><strong>Type-safety</strong> One of the advantages Intents offer is the completely decoupling of the calling code and the recieving activity. It has one major caveat that compilers are now clueless whether the passed in values are correct. Any key can be mapped with any of the types that can be put into the intent.</p></li>
<li><p><strong>Definition</strong> There&#39;s no standard way to specify intent requirements. Some activities need some additional extras that are required for it to start. In some cases additional flags or action might have to be set. There should be an easier and straight forward way of defining these requirements such that misuse can be avoided or spotted on the calling side (compile time errors or fail-fast: during execution of calling code)</p></li>
</ul>

<p>These happen to be the major problems with intents. </p>

<h2>The ideal solution</h2>

<p>The ideal solution for this problem is to write wrappers for all intents and expose helpers/builders for starting activities. But the amount of code actually needed for this is very huge. A sample <code>DemoActivity</code> with three extras two of which are definitely required(<code>id</code> and <code>name</code>) will look as follows:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ID</span>     <span class="o">=</span> <span class="s">&quot;DemoActivity#id&quot;</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">NAME</span>   <span class="o">=</span> <span class="s">&quot;DemoActivity#name&quot;</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">GENDER</span> <span class="o">=</span> <span class="s">&quot;DemoActivity#gender&quot;</span><span class="o">;</span>


    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Parser</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">;</span>

        <span class="kd">private</span> <span class="nf">Parser</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">intent</span> <span class="o">=</span> <span class="n">intent</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">private</span> <span class="kt">int</span> <span class="nf">id</span><span class="o">(</span><span class="kt">int</span> <span class="n">defValue</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">intent</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">defValue</span><span class="o">;</span>
            <span class="k">return</span> <span class="n">intent</span><span class="o">.</span><span class="na">getIntExtra</span><span class="o">(</span><span class="n">ID</span><span class="o">,</span> <span class="n">defValue</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="kd">private</span> <span class="kt">int</span> <span class="nf">name</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">intent</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="k">return</span> <span class="n">intent</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="n">NAME</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// @TypeDef support annotation</span>
        <span class="nd">@Gender</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="nf">gender</span><span class="o">(</span><span class="kt">int</span> <span class="n">defValue</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">intent</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">defValue</span><span class="o">;</span>
            <span class="k">return</span> <span class="n">intent</span><span class="o">.</span><span class="na">getIntExtra</span><span class="o">(</span><span class="n">GENDER</span><span class="o">,</span> <span class="n">defValue</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
        <span class="nd">@Gender</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">gender</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">Builder</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">gender</span><span class="o">(</span><span class="nd">@Gender</span> <span class="kt">int</span> <span class="n">g</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">gender</span> <span class="o">=</span> <span class="n">g</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="n">Intent</span> <span class="nf">intent</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">DemoActivity</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">ID</span><span class="o">,</span> <span class="n">id</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">NAME</span><span class="o">,</span> <span class="n">name</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">GENDER</span><span class="o">,</span> <span class="n">gender</span><span class="o">);</span>
        <span class="o">}</span> 

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">context</span><span class="o">.</span><span class="na">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">(</span><span class="n">context</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>As can be seen this quickly gets verbose with null checks and changing one field leads to additional changes in multiple places, maintainability becomes hard.</p>

<h2>Annotation processing to rescue</h2>

<p>The repeated code in the above can be generated by an annotation processor. Opting for a definition structure very similar to <code>AutoValue</code>. The code could look like:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedState</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// DemoActivity_Extras is the generated class</span>
        <span class="n">Extras</span> <span class="n">extras</span> <span class="o">=</span> <span class="n">DemoActivity_Extras</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span> 

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Builder</span> <span class="nf">withExtras</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// DemoActivity_Builder is the generated class</span>
        <span class="c1">// all non-optional parameters are taken in constructor</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DemoActivity_Builder</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>   

    <span class="c1">// generated DemoActivity_Extras</span>
    <span class="nd">@Args</span><span class="o">(</span><span class="n">DemoActivity</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">static</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Extras</span> <span class="o">{</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">id</span><span class="o">();</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">name</span><span class="o">();</span>

        <span class="nd">@Optional</span> <span class="nd">@Gender</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">gender</span><span class="o">(</span><span class="kt">int</span> <span class="n">defValue</span><span class="o">);</span>

        <span class="c1">// methods to check if the extra was passed in the intent</span>
        <span class="nd">@Helpers</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">boolean</span> <span class="nf">hasId</span><span class="o">();</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">boolean</span> <span class="nf">hasName</span><span class="o">();</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">boolean</span> <span class="nf">hasGender</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// This is optional</span>
    <span class="c1">// the info above given by @Extras is enough</span>
    <span class="c1">// to generate DemoActivity_Builder</span>
    <span class="nd">@ArgFactory</span><span class="o">(</span><span class="n">DemoActivity</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">interface</span> <span class="nc">Builder</span> <span class="o">{</span>
        <span class="n">Builder</span> <span class="nf">gender</span><span class="o">(</span><span class="nd">@Gender</span> <span class="kt">int</span> <span class="n">gender</span><span class="o">);</span>

        <span class="n">Intent</span> <span class="nf">intent</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">);</span>
        <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">);</span>
        <span class="kt">void</span> <span class="nf">startActivityForResult</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">requestCode</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>Now this activity can be started from the calling code in a very clean way:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">DemoActivity</span><span class="o">.</span><span class="na">withExtras</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;Name&quot;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">gender</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
            <span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div>
<p>Compiler knows what the activity needs to start now. We get awesome autocompletion and the completion would suggest us the required fields and the optional ones. Notice the absence of intent key definitions. The keys can also be generated and if some of the extras need to have a partcular key, it can be provided with a <code>@Key</code> annotation.</p>

<p>The same method can be used for generating <code>Builder</code>s for activities that use Intents with uris or action and data. The code in the above class can further be reduced. Once the optional parameters are declared with <code>@Optional</code> the <code>Builder</code> can actually be generated without the interface. </p>

<p>There is no need for both <code>@Args</code> and <code>@ArgFactory</code> to be defined as inner classes of Activity. So these annotations could be used for generating type safe wrappers for any existing activities (from other libraries or core android activities).</p>

<p>I have already made an attempt in this direction once and made the <a href="https://github.com/workarounds/bundler">Bundler library</a>. It&#39;s actually simpler to use but it has many issues that I discovered while using and it heavily exposes the generated classes which turned out to be a very bad idea (no surprises there).</p>

<p>I&#39;d like to inputs and would appreciate any advice and suggestions in re-doing the library (or starting a new one) with a better api and more focus. </p>

	  ]]></description>
	</item>

	<item>
	  <title>Interface vs abstract class for `@Args`</title>
	  <link>/blog//interface-vs-abstract-class</link>
	  <author>Madhu kiran</author>
	  <pubDate>2016-02-05T10:18:00+00:00</pubDate>
	  <guid>/blog//interface-vs-abstract-class</guid>
	  <description><![CDATA[
	     <p>Having decided defining the <code>@Arg</code>s are better off by not being fields. Having an inner <code>class/interface</code> for them seems like a good idea. For a DemoActivity with two fields <code>int id</code> and <code>String name</code> the <code>class</code> and <code>interface</code> will look as follows:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="c1">// inner class of DemoActivity</span>
    <span class="nd">@Args</span>
    <span class="kd">interface</span> <span class="nc">Extras</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="nf">id</span><span class="o">();</span>
        <span class="n">String</span> <span class="nf">name</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div><div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="c1">// inner class of DemoActivity</span>
    <span class="nd">@Args</span>
    <span class="kd">static</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Extras</span> <span class="o">{</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">id</span><span class="o">();</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">name</span><span class="o">();</span>
    <span class="o">}</span> 
</code></pre></div>
<p>Point weighing in the direction of <code>interface</code> is the marginally lesser amount of code. But the advantages with using a <code>class</code> for this job are evident the <code>class</code> does not need to have <code>public</code> visibility, it could be package-default and the methods inside can be <code>protected</code> as only the surrounding class <code>DemoActivity</code> will be accessing it. The fields cannot be <code>private</code> because then the generated class won&#39;t be able to extend it. And additionally methods can be added to a class that act as derived fields for example:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="c1">// inner class of DemoActivity</span>
    <span class="nd">@Args</span>
    <span class="kd">static</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Extras</span> <span class="o">{</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">firstName</span><span class="o">();</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">lastName</span><span class="o">();</span>

        <span class="c1">// not an Intent Extra</span>
        <span class="kd">protected</span> <span class="n">String</span> <span class="nf">fullName</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nf">firstName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">lastName</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span> 
</code></pre></div>
<p><code>extras.fullName()</code> can now be accessed although it&#39;s not data sent in intent. Any data modifications can be done in such a manner. Although I&#39;m not sure how useful this is going to be.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Defaults in Bundler 2.0</title>
	  <link>/blog//defaults-in-bundler-2</link>
	  <author>Madhu kiran</author>
	  <pubDate>2016-02-05T10:18:00+00:00</pubDate>
	  <guid>/blog//defaults-in-bundler-2</guid>
	  <description><![CDATA[
	     <p>The previous version of <code>Bundler</code> used fields, so they could be initialized to some value, if the intent/bundle recieved didn&#39;t contain the key corresponding to the field it was left as is. So in a way it provided some defaults. For example:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@RequireBundler</span><span class="o">(</span><span class="n">requireAll</span><span class="o">=</span><span class="kc">false</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
    <span class="nd">@Arg</span> <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="nd">@Arg</span> <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Jake&quot;</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedState</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Bundler</span><span class="o">.</span><span class="na">inject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>So if the intent didn&#39;t have an extra corresponding to <code>id</code> value of the field would be left as <code>1</code> and similarly <code>name</code> would default to <code>Jake</code>. Though this was useful there&#39;s an unwanted side-effect with this stategy when followed in a <code>Service</code> or activities that use <code>onNewIntent</code>. Cosider the following service:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@RequireBundler</span><span class="o">(</span><span class="n">requireAll</span><span class="o">=</span><span class="kc">false</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoService</span> <span class="kd">extends</span> <span class="n">Service</span> <span class="o">{</span>
    <span class="nd">@Arg</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
    <span class="nd">@Arg</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">onStartCommand</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Bundler</span><span class="o">.</span><span class="na">inject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onStartCommand</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">flags</span><span class="o">,</span> <span class="n">startId</span><span class="o">);</span>
    <span class="o">}</span> 
<span class="o">}</span>
</code></pre></div>
<p>The problem with this is if first intent sets the value of <code>id</code> to <code>1</code> and <code>name</code> to <code>&quot;Jake&quot;</code> and there&#39;s a second intent that was intended to set <code>id</code> to <code>2</code> then <code>name</code> would still be <code>&quot;Jake&quot;</code> though nothing was sent. And there&#39;d be no way to know that this happened. </p>

<p>Now since there are no more fields and we have methods instead, we have more control. The methods can take a parameter of the same type:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoService</span> <span class="kd">extends</span> <span class="n">Service</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">onStartCommand</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Extras</span> <span class="n">extras</span> <span class="o">=</span> <span class="n">DemoService_Extras</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
        <span class="c1">// use id and name as follows:</span>
        <span class="n">extras</span><span class="o">.</span><span class="na">id</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">extras</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onStartCommand</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">flags</span><span class="o">,</span> <span class="n">startId</span><span class="o">);</span>
    <span class="o">}</span> 

    <span class="nd">@Args</span>
    <span class="kd">static</span> <span class="kd">abstract</span> <span class="n">Extras</span> <span class="o">{</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">id</span><span class="o">(</span><span class="kt">int</span> <span class="n">defaultVal</span><span class="o">);</span>
        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">name</span><span class="o">(</span><span class="n">String</span> <span class="n">defaultVal</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>Alternate approach for Bundler</title>
	  <link>/blog//alternate-appraoch-bundler</link>
	  <author>Madhu kiran</author>
	  <pubDate>2016-02-04T10:18:00+00:00</pubDate>
	  <guid>/blog//alternate-appraoch-bundler</guid>
	  <description><![CDATA[
	     <h2>Problems with Bundler</h2>

<ul>
<li>global fields with package level visibility</li>
<li>use of generated classes all over the place</li>
<li>may be generates too much code and should make users write more (?)</li>
<li><code>@State</code> is an entirely different problem that <code>Bundler</code> need not address</li>
<li>An activity using <code>Bundler</code> to get type-safety is not an implementation detail and ideally it should be.</li>
<li>Field defaults and resetting (what should be default value, should the field value be reset when a second value is injected)</li>
</ul>

<p>Right now calling classes make use of the generated <code>Bundler</code> class for starting activities. But ideally Bundler should be an implementation detail for the calling classes. A better approach would be to not generate the <code>bundlerActivity()</code> methods in <code>Bundler</code>.</p>

<p>So a better version of <code>Bundler</code> though requiring more code would have the following features:</p>

<ul>
<li>No global fields</li>
<li>calling classes shouldn&#39;t need to know the existence of <code>Bundler</code></li>
<li>minimize the use of generated classes</li>
</ul>

<p>An approach similar to the super-awesome <code>AutoValue</code> library can be taken. Instead of getting the intent extras from fields they can be defined in an interface (or an abstract class ?)</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Extras</span> <span class="n">extras</span> <span class="o">=</span> <span class="n">DemoActivityExtras</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="c1">// use id(-1) and name() methods of Extras</span>
    <span class="o">}</span>

    <span class="nd">@Args</span>
    <span class="kd">interface</span> <span class="nc">Extras</span> <span class="o">{</span>
        <span class="nd">@Key</span><span class="o">(</span><span class="s">&quot;some_key&quot;</span><span class="o">)</span>
        <span class="kt">int</span> <span class="nf">id</span><span class="o">(</span><span class="kt">int</span> <span class="n">defaultVal</span><span class="o">);</span>
        <span class="nd">@Required</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span> <span class="nd">@Nullable</span>
        <span class="n">String</span> <span class="nf">name</span><span class="o">();</span>

        <span class="c1">// extra helper methods can be added to know if a key was sent or not</span>
        <span class="nd">@Helper</span>
        <span class="kt">boolean</span> <span class="nf">hasName</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">DemoActivityExtras</span><span class="o">.</span><span class="na">Builder</span> <span class="nf">withId</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">DemoActivityExtras</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>A calling class (say <code>AnotherActivty</code>) can start the above <code>DemoActivity</code> as:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java">    <span class="c1">// code in AnotherActivity.class</span>
    <span class="n">DemoActivity</span><span class="o">.</span><span class="na">withId</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;xyz&quot;</span><span class="o">).</span><span class="na">start</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</code></pre></div>
<p>The only problem with this is <code>DemoActivityExtras.Builder</code> which is a generated class is being exposed. Ideal case would be to go the full <code>AutoValue</code> way and require a Builder interface inside Extras. But how much code is too much and where lies the line. This version of <code>Bundler</code> is more sound that the current one but it definitely increased the code, and a little more code <code>Bundler</code> would become an implementation detail completely.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Bundler</title>
	  <link>/blog//bundler-intro</link>
	  <author>Madhu kiran</author>
	  <pubDate>2016-01-15T10:18:00+00:00</pubDate>
	  <guid>/blog//bundler-intro</guid>
	  <description><![CDATA[
	     <h3>The problem</h3>

<p>Bundles and intents in android are used every where. They&#39;re android&#39;s way of serializing data,
persisting state and decoupling elements completely so that one component (activity/service/..)
does not need to depend on an interface or a method from another component to start it. The problem
with intents and bundles is two-fold.
1. There is too much broiler plate
2. Type safety is lost in the process of serialization</p>

<p>Consider a simple example app where in <code>PostActivity</code> we ask the user to provide a <code>title</code>,
<code>content</code> of a post and post it. This information along with the current time is passed on
to the <code>DisplayActivity</code> which displays the <code>title</code>, <code>content</code> and <code>time</code>. So to perform this
simple task the activities will look something like this:</p>

<p>First let&#39;s see the <code>DisplayActivity</code></p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="n">DisplayActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
    <span class="c1">// intent keys</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">KEY_TITLE</span>   <span class="o">=</span> <span class="s">&quot;activity_display_title&quot;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">KEY_CONTENT</span> <span class="o">=</span> <span class="s">&quot;activity_display_content&quot;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">KEY_TIME</span>    <span class="o">=</span> <span class="s">&quot;activity_display_time&quot;</span>

    <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">time</span><span class="o">;</span>

    <span class="n">TextView</span> <span class="n">titleTv</span><span class="o">;</span>
    <span class="n">TextView</span> <span class="n">contentTv</span><span class="o">;</span>
    <span class="n">TextView</span> <span class="n">timeTv</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_display</span><span class="o">);</span>

        <span class="c1">// init the views (or use ButterKnife)</span>

        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">();</span>
        <span class="k">if</span><span class="o">(</span><span class="n">intent</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">title</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="n">KEY_TITLE</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
            <span class="n">content</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="n">KEY_CONTENT</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
            <span class="n">time</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getStringExtra</span><span class="o">(</span><span class="n">KEY_TIME</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>

            <span class="n">titleTv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">title</span><span class="o">);</span>
            <span class="n">contentTv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
            <span class="n">timeTv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">time</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div>
<p>Now the <code>PostActivity</code> looks like this</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="n">PostActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="kd">implements</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span> <span class="o">{</span>
    <span class="n">EditText</span> <span class="n">title</span><span class="o">;</span>
    <span class="n">EditText</span> <span class="n">content</span><span class="o">;</span>
    <span class="n">Button</span> <span class="n">post</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_post</span><span class="o">);</span>

        <span class="c1">// init the views (or use ButterKnife)</span>

        <span class="n">post</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
      <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">DisplayActivity</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">DisplayActivity</span><span class="o">.</span><span class="na">KEY_TITLE</span><span class="o">,</span>
                                          <span class="n">title</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">())</span>
                                <span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">DisplayActivity</span><span class="o">.</span><span class="na">KEY_CONTENT</span><span class="o">,</span>
                                          <span class="n">content</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">())</span>
                                <span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">DisplayActivity</span><span class="o">.</span><span class="na">KEY_TIME</span><span class="o">,</span>
                                          <span class="n">getTimeAsString</span><span class="o">());</span>
        <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">getTimeAsString</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// obtain date time from calendar, format to string and return time</span>
        <span class="k">return</span> <span class="n">timeStr</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>For achieving this small result we had to define <code>KEYS</code> for the intent, construct that intent
in <code>PostActivity</code> and parse the intent in <code>DisplayActivity</code>. And after all this if in future
we decide that <code>DisplayActivity</code> would accept <code>time</code> as <code>long</code> instead of <code>String</code> then if
all the activities opening <code>DisplayActivity</code> would have to be altered and the compiler would
not be of any help if there are multiple activities accessing <code>DisplayActivity</code>. Since
<code>intent.putExtra(key, value)</code> accepts both <code>String</code> and <code>long</code> no compile time error would be
 shown. Only a runtime exception (which is also caught and printed as a warning in the logs) is
 thrown. How do we solve this then?</p>

<h3>The solution</h3>

<p>So a slightly better way and type safe way to do the above would be to define a static <code>start()</code>
 method in <code>DisplayActivity</code> and use only the static method to start activity:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">DisplayActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
    <span class="c1">// intent keys can now be private</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">KEY_TITLE</span>   <span class="o">=</span> <span class="s">&quot;activity_display_title&quot;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">KEY_CONTENT</span> <span class="o">=</span> <span class="s">&quot;activity_display_content&quot;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">KEY_TIME</span>    <span class="o">=</span> <span class="s">&quot;activity_display_time&quot;</span>

    <span class="c1">// same as the previous version</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">content</span><span class="o">,</span> <span class="n">String</span> <span class="n">time</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">DisplayActivity</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">DisplayActivity</span><span class="o">.</span><span class="na">KEY_TITLE</span><span class="o">,</span>
                                          <span class="n">title</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">DisplayActivity</span><span class="o">.</span><span class="na">KEY_CONTENT</span><span class="o">,</span>
                                          <span class="n">content</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">DisplayActivity</span><span class="o">.</span><span class="na">KEY_TIME</span><span class="o">,</span>
                                          <span class="n">time</span><span class="o">);</span>
        <span class="n">context</span><span class="o">.</span><span class="na">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
    <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>
<p>Now <code>PostActivity</code> can simply use this method without bothering with the intent keys</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="n">implement</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span> <span class="o">{</span>

    <span class="c1">// same code as above version</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">DisplayActivity</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">title</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">,</span>
                              <span class="n">content</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span>
                              <span class="n">getTimesAsString</span><span class="o">(),</span>
                              <span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>
<p>By this calling code becomes much cleaner and also if in future <code>time</code> in <code>DisplayActivity</code> is changed
 to <code>long</code> then it would show an error at all the places <code>String</code> is being used in the <code>start()</code> method
 in compile time. This is a very good solution to the problem but increases the trivial code that needs
 to be written.</p>

<h3><a href="https://github.com/workarounds/bundler">Bundler</a> to reduce the broiler plate</h3>

<p><a href="https://github.com/workarounds/bundler">Bundler</a> is an annotation processor that aims to generate
this trivial code for you. Using bundler the <code>DisplayActivity</code> will change to:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@RequiresBundler</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DisplayActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
    <span class="nd">@Arg</span>
    <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="nd">@Arg</span>
    <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
    <span class="nd">@Arg</span>
    <span class="n">String</span> <span class="n">time</span><span class="o">;</span>

    <span class="n">TextView</span> <span class="n">titleTv</span><span class="o">;</span>
    <span class="n">TextView</span> <span class="n">contentTv</span><span class="o">;</span>
    <span class="n">TextView</span> <span class="n">timeTv</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_display</span><span class="o">);</span>

        <span class="c1">// init the views (or use ButterKnife)</span>

        <span class="n">Bundler</span><span class="o">.</span><span class="na">inject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div>
<p>And now <code>DisplayActivity</code> can be started from <code>PostActivity</code> as follows:</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="n">implement</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span> <span class="o">{</span>

    <span class="c1">// same code as the initial version</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Bundler</span><span class="o">.</span><span class="na">diplayActivity</span><span class="o">(</span><span class="n">title</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span>
                               <span class="n">content</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span>
                               <span class="n">getTimeAsString</span><span class="o">())</span>
                               <span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p><code>Bundler</code> is the generated class. It has static methods to start and inject activities (also fragments).
There are also some helper classes generated which provide additional advanced functionality (more about
this in a later post). It also has a <code>@State</code> annotation which can be used to save and restore instance
state (like IcePick library).</p>

<p>The objective of the library is to help make type safe ways to start and create activities, services and
fragments a breeze (as easy as defining annotated fields). Reviews of the API, comments and suggestions on
how to make it better, help with docs, testing and any sort of PRs in general are welcome. We&#39;re currently
using this library in this app:
<a href="https://play.google.com/apps/publish/?dev_acc=04786613567846403539#MarketListingPlace:p=in.workarounds.define">Define</a>
and this library <a href="https://github.com/workarounds/portal">Portal</a>.</p>

<p>Please create issues or comment on this reddit thread for suggestions:
<a href="">reddit post</a></p>

	  ]]></description>
	</item>


</channel>
</rss>
